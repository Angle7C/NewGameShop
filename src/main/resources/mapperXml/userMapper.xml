<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 设置为IUserDao接口方法提供sql语句配置 -->
<mapper namespace="com.gameshop.mapper.UserMapper">
    <resultMap id="userRM" type="com.gameshop.entity.User">
        <id column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="user_pwd"  property="userPwd"/>
        <result column="email" property="email"/>
        <result column="role" property="role"/>
        <result column="money" property="money"/>
    </resultMap>
    <select id="findAll" resultType="User" resultMap="userRM">
        select * from user
    </select>

    <select id="findId" resultType="User" resultMap="userRM">
        select * from user where user_id=#{param1}
    </select>

    <select id="findEmail" resultType="User" resultMap="userRM">
        select * from user where email=#{email}
    </select>

    <select id="seekUser" resultType="User" resultMap="userRM">
        select * from user where user_name like %#{userName}%
    </select>

    <insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
        insert into user(user_name,user_pwd,email, role,money ) value(#{userName},#{userPwd},#{email},#{role},#{money})
    </insert>

    <insert id="addUserMoney" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
        insert into user(money) value(#{money})
    </insert>

    <update id="updateUser" parameterType="User">
        update user set user_name=#{userName},user_pwd=#{userPwd},email=#{email},money=#{money} where user_id=#{userId}
    </update>

    <update id="updateUserRole" parameterType="User">
        update user set role=#{role} where user_id=#{userId}
    </update>

    <delete id="deleteUser" parameterType="User">
       delete from user where user_id=#{userId}
    </delete>
    <select id="findPage" resultType="User" resultMap="userRM">
        select * from user where user_id in ( select user_id from (
            select user_id from user where user_id not in
                (select user_id from (select user_id from user LIMIT #{param2} ) as a)
        ) as b ) limit #{param1}
    </select>

</mapper>